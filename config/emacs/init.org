#+TITLE: Emacs init file
#+PROPERTY: Header-args :tangle "init.el"

* About

My configuration for GNU Emacs. Comments/suggestions welcome.

Resources I've found particularly useful:
+ Bastien Guerry's [[https://codeberg.org/bzg/dotemacs/src/branch/master/emacs.org][configuration]] and [[https://bzg.fr/en/the-zen-of-task-management-with-org/][article]] on org-mode for task management 
+ Nicolas P. Rougier's [[https://github.com/rougier/dotemacs/blob/master/dotemacs.org][configuration]] 
+ Protesilaos Stavrou's [[https://protesilaos.com/emacs/][packages]], [[https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-emacs.org][configuration]], and [[https://protesilaos.com/][website]]
+ David Wilson's (System Crafters) /Emacs from Scratch/ [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][video guide]] 

* Bootstrap code for straight.el

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(use-package straight
  :custom
  (straight-use-package-by-default t))
#+end_src

* General defaults

** Main settings
#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq custom-file null-device) ; persistent settings need to be made with init.el
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

  (setq-default 
    inhibit-startup-screen t
    inhibit-startup-message t)

  (menu-bar-mode -1) 
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (blink-cursor-mode -1)

  (save-place-mode 1) 
  (savehist-mode 1)
  (recentf-mode 1)
  (global-auto-revert-mode 1) ; refresh buffers with file changes
  (setq auto-revert-verbose nil) ; don't clutter minibuffer with "Reverting..." messages

  (setq frame-inhibit-implied-resize t)

  (setq use-short-answers t)

  (setq scroll-step            1
    scroll-conservatively  10000)

  (setq display-line-numbers-type 'relative)
  (setq-default display-line-numbers-width 3) ; make line numbers column three digits wide

  (setq-default electric-indent-mode nil) ; no automatic identation
  (setq-default indent-tabs-mode nil) ; use spaces everywhere
  
  (setq truncate-string-ellipsis "…") ; Unicode ellipsis rather than "..."
  (setq sentence-end-double-space nil)) ; Make sure sentences end with one space
#+end_src

** Tabs

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq tab-always-indent 'complete)
  (setq-default tab-width 2
                indent-tabs-mode nil))
#+end_src

** Copy and paste

#+begin_src emacs-lisp
;; make copy and paste work on wayland (https://www.emacswiki.org/emacs/CopyAndPaste) 
(use-package emacs
  :config
  (setq wl-copy-process nil)

  (defun wl-copy (text)
    (setq wl-copy-process (make-process :name "wl-copy"
                                        :buffer nil
                                        :command '("wl-copy" "-f" "-n")
                                        :connection-type 'pipe
                                        :noquery t))
      (process-send-string wl-copy-process text)
      (process-send-eof wl-copy-process))

  (defun wl-paste ()
    (if (and wl-copy-process (process-live-p wl-copy-process))
         nil ; should return nil if we're the current paste owner
        (shell-command-to-string "wl-paste -n | tr -d \r")))

  (setq interprogram-cut-function 'wl-copy)
  (setq interprogram-paste-function 'wl-paste))
#+end_src

#+begin_src emacs-lisp
(use-package xclip
  :config
  (setq xclip-program "wl-copy")
  (setq xclip-select-enable-clipboard t)
  (setq xclip-mode t)
  (setq xclip-method (quote wl-copy)))
#+end_src

#+begin_src emacs-lisp
(defun copy-link-url-at-point ()
  "Copy URL of link at point."
  (interactive)
  (let ((url (or (thing-at-point 'url t)
                 (get-text-property (point) 'url)
                 (when (button-at (point))
                   (button-get (button-at (point)) 'url)))))
    (if url
        (progn
          (kill-new url)
          (message "Copied URL: %s" url))
      (message "No URL found at point"))))
#+end_src

#+begin_src emacs-lisp
(defun copy-current-file-path ()
  "Copy current buffer's file path and show it in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (unless file-name (user-error "Buffer not visiting a file"))
    (kill-new file-name)
    (minibuffer-message "%s" file-name)))
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

* Interface

** Fonts

#+begin_src emacs-lisp
(use-package fontaine
  :hook
  ;; keep last font preset when closing/starting Emacs
  ((after-init . fontaine-mode)
   (after-init . (lambda ()
                   ;; set last preset or fall back to regular preset
                   (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))
  :config 
  (setq fontaine-presets
        '((regular)
          (alternative
           :inherit standard
           :variable-pitch-family "Libertinus Serif")
          (presentation
           :default-height 180)
          (t
           :default-family "Iosevka"
           :default-height 115
           :fixed-pitch-family "Iosevka"
           :variable-pitch-family "Aporetic Serif"          
           :variable-pitch-height 1.0)))
  (with-eval-after-load 'pulsar
    (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))
#+end_src

#+begin_src emacs-lisp
(use-package mixed-pitch
    :hook (text-mode . mixed-pitch-mode))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package ef-themes
  :config
  (setq ef-themes-common-palette-overrides
        '((prose-done fg-dim))))
#+end_src

#+begin_src emacs-lisp
(use-package doric-themes
 :config
 (setq doric-themes-to-toggle '(doric-earth doric-obsidian))
 (doric-themes-select 'doric-obsidian))
#+end_src

#+begin_src emacs-lisp
(defun my-switch-theme ()
    (interactive)
    (doric-themes-toggle)
    (my/org-font-setup)
    (my/org-mode-face-edits))
#+end_src

** Interface general

#+begin_src emacs-lisp
(use-package spacious-padding
  :init 
  (setq spacious-padding-subtle-mode-line t)
  (spacious-padding-mode 1))

(setq spacious-padding-widths
        '( :right-divider-width 1
           :mode-line-width 0))

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
   (setq doom-modeline-height 15
         doom-modeline-enable-word-count t
         doom-modeline-buffer-encoding nil
         doom-modeline-percent-position nil
         doom-modeline-total-line-number t
         doom-modeline-buffer-file-name-style 'buffer-name
         doom-modeline-mu4e nil
         doom-modeline-icon nil))

(use-package rainbow-mode
  :init
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil)
  :hook prog-mode)

(use-package rainbow-delimiters
  :hook ((lisp-mode emacs-lisp-mode) . rainbow-delimiters-mode))

(add-hook 'prog-mode-hook 'hl-line-mode)
(setq hl-line-sticky-flag nil) ; only highlight line in active window
;; disable hl-line-mode for insert mode
(add-hook 'evil-insert-state-entry-hook (lambda () (when hl-line-mode (hl-line-mode -1))))
(add-hook 'evil-insert-state-exit-hook  (lambda () (when (derived-mode-p 'prog-mode) (hl-line-mode 1))))

(use-package pulsar
  :config
  (setq pulsar-pulse-on-window-change t)
  (pulsar-global-mode 1))

(use-package dired-preview)
#+end_src

** Olivetti mode

#+begin_src emacs-lisp
(use-package olivetti
  :config
  (setq olivetti-body-width 100)
  (setq olivetti-recall-visual-line-mode-entry-state t) 
  :hook (text-mode . olivetti-mode))

(add-hook 'text-mode-hook (lambda () 
                            (fringe-mode 1)
                            (display-line-numbers-mode -1)))

(add-hook 'prog-mode-hook (lambda ()
                            (fringe-mode -1)
                            (display-line-numbers-mode 1)))
#+end_src

** Completion

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode 1))

(use-package corfu
  :hook (after-init . global-corfu-mode)
  :config
  ;; sort by input history
  (with-eval-after-load 'savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package marginalia
  :custom
  (marginalia-align 'right)
  :init 
  (marginalia-mode 1))

(use-package embark
  :init)

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(global-set-key (kbd "C->") 'embark-act)

(use-package consult
  :init)

(defvar org-source
  (list :name     "Org Buffer"
        :category 'buffer
        :narrow   ?o
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (insert "#+title: " name "\n\n")
            (org-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (consult--buffer-query :mode 'org-mode :as #'consult--buffer-pair))))

(add-to-list 'consult-buffer-sources 'org-source 'append)

(use-package which-key
  :config (which-key-mode)
  :custom
  (which-key-max-description-length 40)
  (which-key-lighter nil)
  (which-key-sort-order 'which-key-description-order))
#+end_src

** Evil

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t ; optional since it's already set to t by default
        evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-undo-system 'undo-redo ; add C-r redo functionality
        evil-respect-visual-line-mode t)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

** Spelling

#+begin_src emacs-lisp
(use-package flyspell
  :init (flyspell-mode)
  :custom
    (setq ispell-program-name "hunspell"
          ispell-really-hunspell t
          ispell-dictionary "en_GB"
          ispell-silently-savep t
          ispell-personal-dictionary "~/.hunspell_en_GB")
  :hook (text-mode . flyspell-mode)
  :hook (prog-mode . flyspell-prog-mode))
  
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper))
  :bind (:map flyspell-mouse-map ("RET" . flyspell-correct-at-point))
  :bind (:map flyspell-mouse-map ([mouse-1] . flyspell-correct-at-point)))

(use-package flyspell-correct-avy-menu
  :after flyspell-correct)
#+end_src

* Keybindings

** General key edits

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-S-v") 'yank) ; added this for pasting URLs into minibuffer
#+end_src

** Keybindings with SPC leader key 

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; use SPACE as global leader key
  (general-create-definer my/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ; set leader
    :global-prefix "M-SPC") ; use leader in insert mode
  (my/leader-keys
    ;; buffers
    "b" '(:ignore t :wk "Buffers")
    "b b" '(consult-buffer :wk "Show buffers")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    ;; capture
    "c" '(:ignore t :wk "Capture")
    "c c" '(org-capture :wk "New capture")
    "c f" '(org-capture-finalize :wk "Finish")
    "c r" '(org-capture-refile :wk "Refile")
    "c k" '(org-capture-kill :wk "Abort")
    ;; dired/diff
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d e" '(ediff :wk "Ediff two files")
    "d f" '(diff :wk "Show differences between two files")
    "d j" '(dired-jump :wk "Dired jump to current")
    ;; eval
    "e" '(:ignore t :wk "Eval/Ediff")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e e" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    ;; files
    "f" '(:ignore t :wk "Files")
    "f a" '(consult-org-agenda :wk "Jump to org agenda heading")
    "f c" '(copy-current-file-path :wk "Copy current file path")
    "f d" '(kill-current-buffer :wk "Kill current buffer")
    "f f" '(basic-save-buffer :wk "Save buffer")
    "f g" `(,(general-simulate-key "C-x g") :wk "Magit status buffer")
    "f h" '(consult-org-heading :wk "Find org heading")
    "f l" '(consult-line :wk "Find line in current buffer")
    "f p" '(consult-yank-pop :wk "Search clipboard to paste")
    "f r" '(consult-recent-file :wk "Find recent files")
    "f s" '(find-file :wk "Find file")
    ;; comments
    "g c" '(comment-line :wk "Comment lines")
    ;; links
    "l" '(:ignore t :wk "Links")
    "l c" '(copy-link-url-at-point :wk "Copy URL of link at point")
    "l l" '(org-insert-link :wk "Insert a link")
    "l s" '(org-store-link :wk "Store a link")
    ;; mail
    "m" '(:ignore t :wk "Org")
    "m m" '(mu4e :wk "Start mu4e")
    "m s" '(message-send-and-exit :wk "Send email")
    ;; org
    "o" '(:ignore t :wk "Org")
    "o a" '(org-agenda :wk "Org agenda")
    "o A" '(org-archive-subtree :wk "Move current subtree to the archive")
    "o c" '(my/org-insert-str-template :wk "Insert Org source code block")
    "o d" `(,(general-simulate-key "C-c C-d") :wk "Org deadline")
    "o e" `(,(general-simulate-key "C-c '") :wk "Edit src block or exit edit")
    "o f" `(,(lambda() (interactive)(find-file "~/org/projects.org")) :wk "Open projects.org")
    "o g" '(org-set-tags-command :wk "Set Org tags")
    "o h" `(,(general-simulate-key "C-c .") :wk "Org timestamp")
    "o q" '(org-insert-structure-template :wk "Insert structure template")
    "o s" `(,(general-simulate-key "C-c C-s") :wk "Org schedule")
    "o t" '(org-todo :wk "Org todo")
    "o T" '(org-todo-list :wk "Org todo list")
    ;; references
    "q" '(:ignore t :wk "References")
    "q k" '(citar-org-kill-citation :wk "Kill citation")
    "q o" '(citar-open :wk "Open library, notes etc")
    "q p" '(org-cite-csl-activate-render-all :wk "Fontify citations in the buffer")
    "q q" '(citar-insert-citation :wk "Insert citation")
    "q r" '(citar-insert-reference :wk "Insert reference")
    "q u" '(citar-org-update-prefix-suffix :wk "Update citation prefix/suffix")
    "q w" '(my/org-cite-noauthor :wk "Insert narrative citation")
    ;; refile
    "r" '(:ignore t :wk "Refile")
    "r r" '(org-refile :wk "Org refile")
    "r c" '(org-refile-copy :wk "Org refile copy, original item stays in place")
    "r g" '(org-refile-goto-last-stored :wk "Jump to location of last refiled item")
    ;; slips
    "s" '(:ignore t :wk "Slips")
    "s a" '(citar-denote-dwim :wk "Access attachments etc. for bib. slip")
    "s b" '(denote-backlinks :wk "Backlinks for slip")
    "s f" '(denote-open-or-create :wk "Open or reate slip")
    "s l" '(denote-link :wk "Insert Denote link")
    "s m" '(denote-link-after-creating :wk "Create new slip and link")
    "s q" '(citar-denote-open-note :wk "Open bib. slip")
    "s r" '(citar-create-note :wk "New bib. slip")
    "s s" '(denote :wk "New slip with Denote")
    ;; toggle
    "t" '(:ignore t :wk "Toggle")
    "t e" '(my-switch-theme :wk "Toggle ef-themes")
    "t f" '(flyspell-mode :wk "Toggle flyspell")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    ;; elfeed
    "u" '(:ignore t :wk "Elfeed")
    "u r" '(elfeed-update :wk "Update elfeed")
    "u s" '(elfeed-protocol-fever-sync-unread-stat :wk "Sync unread RSS with elfeed")
    "u u" '(elfeed :wk "Open elfeed")
    ;; windows
    "w" '(:ignore t :wk "Windows")
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; move windows
    "w a" '(evil-window-rotate-upwards :wk "Switch windows around")))
#+end_src

** Edits for TAB, RET, and SPC

#+begin_src emacs-lisp
(use-package evil
  :config 
  (setq-default tab-width 2
                indent-tabs-mode nil)
  (with-eval-after-load 'message
    (evil-define-key 'insert message-mode-map (kbd "TAB") #'message-tab))
  ;; unmap keys in 'evil-maps, otherwise (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (define-key evil-insert-state-map (kbd "TAB") 'indent-for-tab-command)))
#+end_src

** Org agenda keybindings

#+begin_src emacs-lisp
;; evil key configurations for org-agenda
(evil-set-initial-state 'org-agenda-mode 'normal)
(general-define-key
  :keymaps 'org-agenda-mode-map
  :prefix "SPC"
  :states '(normal motion)
    "a" '(:ignore t :wk "Agenda")
    "a e" '(org-agenda-earlier :wk "Earlier view")
    "a l" '(org-agenda-later :wk "Later view")
    "a m" '(org-agenda-month-view :wk "Month view")
    "a t" '(org-agenda-todo :wk "All todos")
    "a /" '(org-agenda-filter-by-tag :wk "Filter by tag"))
#+end_src

** Elfeed keybindings

#+begin_src emacs-lisp
;; use 'o' to view elfeed entry in vertical split
;; make sure 'q' deletes the split window
(with-eval-after-load 'elfeed
  (evil-collection-define-key 'normal 'elfeed-search-mode-map
    "o" #'my-elfeed-search-open-other-window)
  (evil-collection-define-key 'normal 'elfeed-show-mode-map
    "q" (lambda ()
          (interactive)
          (elfeed-kill-buffer)
          (when (> (count-windows) 1)
            (delete-window)))))
#+end_src

* Org mode

** Org general

#+begin_src emacs-lisp
(use-package org
  :init
  (setq org-directory "~/org/")
  (setq org-archive-location "~/org/archive/%s::")
  :config
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars t)
  (setq org-cycle-include-plain-lists nil)
  (setq org-pretty-entities t)
  (setq org-ellipsis "⮧")
  (setq org-use-sub-superscripts "{}")
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-return-follows-link t) ; use ENTER key to follow links
  (setq org-startup-with-inline-images t)
  (setq org-startup-folded t)
  (setq org-statup-indented t)    
  (setq org-enforce-todo-dependencies t)
  (setq org-insert-heading-respect-content t)
  (setq org-cycle-separator-lines -1)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-heading-line t) ; e.g. to have an overline extend beyond the text
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t))

(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Org todos and tags

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-tags-column 0) ; put tags one space after headline text
  (setq org-use-property-inheritance t)   
  (setq org-enforce-todo-dependencies t)

  (setq org-todo-keywords
    '((sequence "ONGO(o)" "NEXT(n)" "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SKIP(s)")))
   
  (setq org-tag-alist
    '((:startgroup)
      ("Teaching" . ?t)
      (:grouptags)
      ("FA205" . ?f) ("DES102G" . ?g) ("DES303" . ?d) ("DES232" . ?h) ("PhD" . ?p)
      (:endgroup)
      (:startgroup)
      ("Service" . ?s)
      (:grouptags)
      ("Extern" . ?x) ("ReDes" . ?r) ("TnL" . ?l) ("AIsc" . ?a) ("IJETA" . ?i)
      (:endgroup)
      (:startgroup)
      ("Perso" . ?u)
      (:grouptags)
      ("CV" . ?v) ("Divers" . ?y)
      (:endgroup)
      (:startgroup)
      ("Computing" . ?c)
      (:grouptags)
      ("Emacs" . ?e) ("FW13" . ?w) ("SprN" . ?n) ("Server" . ?b)
      (:endgroup))))
#+end_src

** Org structure templates

#+begin_src emacs-lisp
;; org-insert-structure-template and create new line inside the block
(defun my/org-insert-str-template ()
  (interactive)
  (let ((pt (point)))
    (call-interactively #'org-insert-structure-template)
    (goto-char pt)
    (search-forward "#+begin_src")
    (forward-line 1)
    (insert "\n")
    (forward-line -1)))
#+end_src

#+begin_src emacs-lisp
;; options for source blocks when using org-insert-structure-template (SPC-o-s)
(use-package org
  :config
  (setq org-structure-template-alist
          '(("s" . "src")
            ("e" . "src emacs-lisp")
            ("b" . "src bash")
            ("j" . "src javascript")
            ("p" . "src python")
            ("q" . "quote")
            ("x" . "example")
            ("X" . "export"))))
#+end_src

** Org fonts

#+begin_src emacs-lisp
(defun my/org-font-setup ()
  (set-face-attribute 'org-level-1 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold :overline t)
  (set-face-attribute 'org-level-2 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold)
  (set-face-attribute 'org-level-3 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold)
  (set-face-attribute 'org-level-4 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold)
  (set-face-attribute 'org-level-5 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold)
  (set-face-attribute 'org-level-6 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold)
  (set-face-attribute 'org-level-7 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold)
  (set-face-attribute 'org-level-8 nil :font "Iosevka Etoile" :height 1.2 :weight 'bold))
(add-hook 'org-mode-hook #'my/org-font-setup)
#+end_src

** Org agenda general

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
  (setq org-agenda-window-setup 'only-window) ; agenda uses whole window
  (setq org-agenda-restore-windows-after-quit t) ; restore window configuration on exit
  
  (setq org-agenda-span 7
        org-agenda-start-day "+0d"
        org-agenda-block-separator nil
        org-agenda-compact-blocks t)
  
  (setq org-deadline-warning-days 3)
 
  ;; empty line between days in agenda to space things out 
  (setq org-agenda-format-date
    (lambda (date)
      (concat "\n"
                (org-agenda-format-date-aligned date)))))
#+end_src

** Org agenda custom commands

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-agenda-custom-commands
      '(;; done/skipped tasks to archive
        ("#" "To archive" todo "DONE|SKIP")

        ;; scheduled tasks for this week
        ("w" . "This week's scheduled/deadline tasks")
        ("we" "This week's tasks" agenda "Scheduled tasks for this week"
         ((org-agenda-files '("~/org/projects.org" "~/org/agenda.org"))
         (org-agenda-use-time-grid nil)))
        ("ww" "This week's work tasks" agenda "Scheduled work tasks for this week"
         ((org-agenda-category-filter-preset '("-Perso" "-Computing")) 
         (org-agenda-use-time-grid nil)))
        ("wp" "This week's perso tasks" agenda "Scheduled non-work tasks for this week"
         ((org-agenda-category-filter-preset '("+Perso" "+Computing")) 
         (org-agenda-use-time-grid nil)))

        ;; views for ONGO & NEXT tasks 
        ("n" . "What's next")
        ("nn" "All ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}")
        ("nw" "Work ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("-Perso" "-Computing"))))
        ("nu" "Perso/Comp ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("+Perso" "+Computing"))))
        ("nr" "Research ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("+Research"))))
        ("ns" "Service ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("+Service"))))
        ("nt" "Teaching ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("+Teaching"))))
        ("nc" "Computing ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("+Computing"))))
        ("np" "Perso ONGO & NEXT" tags-todo "TODO={ONGO\\|NEXT}"
         ((org-agenda-category-filter-preset '("+Perso"))))
        
        ;; views for TODO tasks without SCHEDULED/DEADLINE
        (";" . "What is there to do?")
        (";;" "All TODOs" tags-todo "TODO={TODO}+DEADLINE=\"\"+SCHEDULED=\"\"")
        (";w" "Work TODOs" tags-todo "TODO={TODO}+DEADLINE=\"\"+SCHEDULED=\"\""
         ((org-agenda-category-filter-preset '("-Perso" "-Computing"))))
        (";p" "Perso/Comp TODOs" tags-todo "TODO={TODO}+DEADLINE=\"\"+SCHEDULED=\"\""
         ((org-agenda-category-filter-preset '("+Perso" "+Computing"))))

        ;; views for WAIT tasks without SCHEDULED/DEADLINE
        ("h" . "What is waiting?")
        ("hh" "All WAITs" tags-todo "TODO={WAIT}+DEADLINE=\"\"+SCHEDULED=\"\"")
        ("hw" "Work WAITs" tags-todo "TODO={WAIT}+DEADLINE=\"\"+SCHEDULED=\"\""
         ((org-agenda-category-filter-preset '("-Perso" "-Computing"))))
        ("hp" "Perso/Comp WAIT" tags-todo "TODO={WAIT}+DEADLINE=\"\"+SCHEDULED=\"\""
         ((org-agenda-category-filter-preset '("+Perso" "+Computing"))))
        
        ;; views for deadlines within a range of 90 days +- of their warning period 
        ("!" . "Deadlines")
        ("!!" "All deadlines" agenda "Past and upcoming deadlines"
	       ((org-agenda-span 1)
	        (org-deadline-warning-days 90)
	        (org-agenda-entry-types '(:deadline))))
        ("!w" "Work deadlines" agenda "Past and upcoming work deadlines"
	       ((org-agenda-span 1)
	        (org-agenda-category-filter-preset '("-Perso" "-Computing"))
	        (org-deadline-warning-days 90)
	        (org-agenda-entry-types '(:deadline))))
        ("!p" "Perso/Comp deadlines" agenda "Past and upcoming perso/comp deadlines"
	       ((org-agenda-span 1)
	        (org-agenda-category-filter-preset '("+Perso" "+Computing"))
	        (org-deadline-warning-days 90)
	        (org-agenda-entry-types '(:deadline)))))))
#+end_src

** Org agenda startup screen

#+begin_src emacs-lisp
;; show org-agenda list on startup
(add-hook 'server-after-make-frame-hook (lambda ()
                                          (fringe-mode 1)
                                          (setq olivetti-body-width 100)
                                          (olivetti-mode)
                                          (org-agenda nil "t")))

(add-hook 'org-agenda-mode-hook (lambda ()
                                  (fringe-mode 1)
                                  (setq olivetti-body-width 100)
                                  (olivetti-mode)))
#+end_src

** Org interface

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))

(use-package org-appear
  :hook (org-mode . org-appear-mode))

(require 'org-indent)
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))

(use-package org-bullets
  :init
  (setopt org-bullets-bullet-list '("◉" "○" "◆" "◇" "◇" "◇" "◇" "◇"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Calendar

#+begin_src emacs-lisp
(setq calendar-holidays
      '((holiday-fixed 1 1 "New Year's Day")
        (holiday-fixed 2 6 "Waitangi Day")
        (holiday-fixed 2 14 "Valentine's Day")
        (holiday-fixed 4 25 "Anzac Day")
        (holiday-fixed 12 25 "Christmas Day")
        (holiday-fixed 12 26 "Boxing Day")
        (holiday-easter-etc -21 "UK Mother's Day")
        (holiday-easter-etc -2 "Good Friday")
        (holiday-easter-etc 0 "Easter Sunday")
        (holiday-easter-etc 1 "Easter Monday")
        (holiday-float 6 0 3 "UK Father's Day")
        (holiday-float 6 1 1 "King's Birthday")
        (holiday-float 10 1 4 "Labour Day")))
#+end_src

#+begin_src emacs-lisp
(use-package calfw)

(setq cfw:display-calendar-holidays nil)

(setq cfw:fchar-junction ?╋
      cfw:fchar-vertical-line ?┃
      cfw:fchar-horizontal-line ?━
      cfw:fchar-left-junction ?┣
      cfw:fchar-right-junction ?┫
      cfw:fchar-top-junction ?┯
      cfw:fchar-top-left-corner ?┏
      cfw:fchar-top-right-corner ?┓)

(use-package calfw-org)
#+end_src

** Org refile and capture

#+begin_src emacs-lisp
;; refile
(setq org-refile-targets
      '((nil :maxlevel . 3)
        (org-agenda-files :maxlevel . 3)))

;; capture
(setq org-capture-templates
  '(;; todos for intray (to refile later)
    ("t" "TODO for intray" entry
     (file+headline "agenda.org" "Refile")
     "* TODO %?")
    ("e" "TODO from email for intray" entry
     (file+headline "agenda.org" "Refile")
     "* TODO email from %:fromname\n :PROPERTIES:\n :SUBJECT: %:subject\n :EMAIL: %:fromaddress\n :THREAD: %l\n :DATE: %:date\n :NOTES: %?\n :END:")

    ;; RSS from elfeed
    ("r" "RSS from elfeed" entry
     (file+headline "agenda.org" "Refile")
     "* [[%:external-link][%:title]]\n"
     :empty-lines-after 1
     :immediate-finish t)

    ;; reminders
    ("d" "Schedule reminder")
    ("ds" "Schedule reminder for today" entry
     (file+headline "agenda.org" "Reminders")
     "* %^{Title for reminder}\nSCHEDULED: %t\n %?")
    ("dl" "Schedule reminder for another day" entry
     (file+headline "agenda.org" "Reminders")
     "* %^{Title for reminder}\nSCHEDULED: %^t\n %?")

    ;; appointments (scheduled and repeating events)
    ("m" "Appointments")
    ("mw" "Work appointment" entry
     (file+headline "agenda.org" "Work")
     "* %^{Title?}\n %?\n SCHEDULED: %^t")
    ("me" "Work appointment from email" entry
     (file+headline "agenda.org" "Work")
     "* %^{Title?}\n :PROPERTIES:\n :SUBJECT: %:subject\n :EMAIL: %:fromaddress\n :THREAD: %l\n :DATE: %:date\n :NOTES: %?\n SCHEDULED: %^t\n :END:")
    ("mp" "Personal appointment" entry
     (file+headline "agenda.org" "Personal")
     "* %^{Title?}\n %?\n SCHEDULED: %^t")
    ("mm" "Personal appointment from email" entry
     (file+headline "agenda.org" "Personal")
     "* %^{Title?}\n :PROPERTIES:\n :SUBJECT: %:subject\n :EMAIL: %:fromaddress\n :THREAD: %l\n :DATE: %:date\n :NOTES: %?\n SCHEDULED: %^t\n :END:")

    ;; todos in location
    ("a" "Add TODO in location")
    ("ar" "TODO for research" entry
     (file+headline "projects.org" "Research")
     "* TODO %?")
    ("at" "TODO for teaching" entry
     (file+headline "projects.org" "Teaching")
     "* TODO %?")
    ("as" "TODO for service" entry
     (file+headline "projects.org" "Service")
     "* TODO %?")
    ("ap" "TODO for perso" entry
     (file+headline "projects.org" "Perso")
     "* TODO %?")
    ("ac" "TODO for computing" entry
     (file+headline "projects.org" "Computing")
     "* TODO %?")))

(setq org-capture-templates-contexts
      '(("e" ((in-mode . "message-mode")
              (in-mode . "mu4e-headers-mode")
              (in-mode . "mu4e-view-mode")))
        ("me" ((in-mode . "message-mode")
              (in-mode . "mu4e-headers-mode")
              (in-mode . "mu4e-view-mode")))
        ("mm" ((in-mode . "message-mode")
              (in-mode . "mu4e-headers-mode")
              (in-mode . "mu4e-view-mode")))
        ("r" ((in-mode . "elfeed-show-mode")))))
#+end_src

** Citations

#+begin_src emacs-lisp
(setq org-cite-global-bibliography '("~/.local/share/zotero/storage/my_library.bib"))
(setq org-cite-csl-styles-dir (expand-file-name "~/.local/share/zotero/styles"))
(setq org-cite-export-processors '((t csl "apa.csl")))

(use-package citeproc)

(use-package oc-csl-activate
  :straight (oc-csl-activate :type git :host github :repo "andras-simonyi/org-cite-csl-activate")
  :after oc
  :config
  (setq org-cite-csl-activate-use-document-style t
        org-cite-csl-activate-fallback-style "apa.csl"))

(use-package citar
  :straight (citar :type git :host github :repo "emacs-citar/citar" :includes (citar-org))
  :custom
  (citar-bibliography org-cite-global-bibliography)
  (citar-notes-paths '("~/slips"))
  :hook
  (org-mode . citar-capf-setup))

(use-package citar-org
  :after oc
  :custom
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar))

(use-package citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+end_src

#+begin_src emacs-lisp
(defun my/org-cite-noauthor ()
  "Insert citation with 'noauthor' style, e.g. for APA narrative citation"
  (interactive)
   (let ((start (point)))
    (call-interactively #'org-cite-insert)
    (when (looking-back "\\[cite:\\(.*?\\)\\]" (line-beginning-position))
      (let* ((match (match-string 0))
             (keys (match-string 1))
             (styled (format "[cite/na:%s]" keys)))
        (replace-match styled t t)))))
#+end_src

** Denote

#+begin_src emacs-lisp
(use-package denote
  :hook (dired-mode . denote-dired-mode)
  :config
  (setq denote-directory "~/slips")
  (setq denote-known-keywords nil) 
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  (setq denote-rename-buffer-format "%t")
  (denote-rename-buffer-mode 1))

(setq denote-org-front-matter
  "#+title:      %1$s
#+date:       %2$s
#+modified:   %2$s
#+filetags:   %3$s
#+identifier: %4$s
\n")
#+end_src

#+begin_src emacs-lisp
;; update the "modified" timestamp when edits are saved
(add-hook 'org-mode-hook (lambda ()
                           (setq-local time-stamp-active t
                                       time-stamp-line-limit 18
                                       time-stamp-start "^#\\+modified:[ \t]*"
                                       time-stamp-end "$"
                                       time-stamp-format "\[%Y-%m-%d %a %H:%M\]")
                           (add-hook 'before-save-hook #'time-stamp nil 'local)))
#+end_src

#+begin_src emacs-lisp
(use-package citar-denote
  :after (:any citar denote)
  :custom
  (citar-denote-title-format "title") ; default (use nil for citation key)
  (citar-denote-open-attachment nil)  ; don't open attachment when creating new note
  :init
  (citar-denote-mode))
#+end_src

* PDFs

#+begin_src emacs-lisp
(use-package pdf-tools
  :init
  (pdf-tools-install)
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-+" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink)))
#+end_src

* Elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-db-directory "~/.local/share/elfeed"))

(use-package password-store
  :config
  (defconst fever-url-zt (password-store-get "zt_server_fever"))
  (defconst fever-api-url (password-store-get "zt_server_fever_api"))
  (defconst fever-password (password-store-get "freshrss_api")))

(use-package elfeed-protocol
  :config
  (setq elfeed-use-curl t)
  (elfeed-set-timeout 36000)
  (setq elfeed-curl-extra-arguments '("--insecure"))
  (setq elfeed-protocol-fever-fetch-category-as-tag t)
  (setq elfeed-protocol-fever-update-unread-only t)

  (setq elfeed-protocol-feeds `((,fever-url-zt
                                 :api-url ,fever-api-url
                                 :password ,fever-password)))

  (setq elfeed-protocol-enabled-protocols '(fever))
  (elfeed-protocol-enable))
#+end_src

#+begin_src emacs-lisp
;; workaround to sync unread status
;; https://github.com/fasheng/elfeed-protocol/issues/71
(defun elfeed-protocol-fever-sync-unread-stat ()
  "Set all entries in search view to read and fetch latest unread entries."
  (interactive)
  (mark-whole-buffer)
  (cl-loop for entry in (elfeed-search-selected)
           do (elfeed-untag-1 entry 'unread))
  (let ((clean-url (replace-regexp-in-string "^fever\\+" "" fever-url-zt)))
  (elfeed-protocol-fever--do-update clean-url 'update-unread)))
#+end_src

#+begin_src emacs-lisp
;; org-store-link for elfeed
(org-link-set-parameters "elfeed"
  :follow #'elfeed-link-open
  :store  #'elfeed-link-store-link
  :export #'elfeed-link-export-link)
#+end_src

#+begin_src emacs-lisp
(defun my-elfeed-search-open-other-window ()
  "Open elfeed entry in other window."
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (win (selected-window)))
    (with-current-buffer (get-buffer "*elfeed-search*")
      (unless (one-window-p)
        (delete-other-windows win))
      (split-window-sensibly win)
      (other-window 1)
      (elfeed-search-show-entry entry))))
#+end_src

* Email

** General mu4e settings

#+begin_src emacs-lisp
(use-package mu4e
  :straight
  (:local-repo "/usr/share/emacs/site-lisp/mu4e/"
               :type built-in)
  :commands (mu4e)
  :config
  (setq
    mu4e-maildir "~/mail"
    mu4e-get-mail-command "true" ; using cron job and goimapnotify to get mail
    mu4e-update-interval nil
    mu4e-change-filenames-when-moving t ; avoid syncing issues with mbsync
    mu4e-view-show-images t
    mu4e-view-show-addresses t
    mu4e-compose-context-policy nil
    mu4e-compose-complete-only-personal t
    mu4e-compose-dont-reply-to-self t
    mu4e-compose-format-flowed t
    mu4e-confirm-quit nil
    mu4e-hide-index-messages t
    mu4e-modeline-support nil

    ;; disable threading
    mu4e-headers-show-threads nil
    mu4e-headers-include-related nil

    ;; mu4e-header-highlight-face (underline nil)
    mu4e-headers-auto-update t
    mu4e-headers-advance-after-mark t

    mu4e-trash-without-flag t) ; otherwise trashing removes emails from server
    
  (setq mu4e-maildir-shortcuts
        '((:maildir "/perso/Inbox"       :key ?p)
          (:maildir "/perso/Sent"        :key ?w)
          (:maildir "/uoa/Inbox"         :key ?i)
          (:maildir "/uoa/Sent Items"    :key ?s)))

  ;; view messages in browser with 'aV'
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

  ;; bury buffer instead of quitting
  (evil-define-key 'normal mu4e-main-mode-map (kbd "q") 'bury-buffer)) 
#+end_src

** Email accounts/'contexts'

#+begin_src emacs-lisp
(use-package mu4e
  :config
  (setq mu4e-contexts
       (list
         ;;uoa
         (make-mu4e-context
           :name "uoa"
           :match-func
             (lambda (msg)
               (when msg
                 (string-prefix-p "/uoa" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "l.baldwin-ramult@auckland.ac.nz")
                     (user-full-name . "Leo Baldwin-Ramult")
                     (mu4e-sent-folder . "/uoa/Sent Items")
                     (mu4e-drafts-folder . "/uoa/Drafts")
                     (mu4e-refile-folder . "/uoa/Archive")
                     (mu4e-trash-folder . "/uoa/Deleted Items")
                     (mu4e-sent-messages-behavior . delete))) ; IMAP takes care of this

         ;; perso
         (make-mu4e-context
           :name "perso"
           :match-func
             (lambda (msg)
               (when msg
                 (string-prefix-p "/perso" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "mail@leverarchfile.org")
                     (user-full-name . "Leo Baldwin-Ramult")
                     (mu4e-sent-folder . "/perso/Sent")
                     (mu4e-drafts-folder . "/perso/Drafts")
                     (mu4e-refile-folder . "/perso/Archive")
                     (mu4e-trash-folder . "/perso/Trash")
                     (mu4e-sent-messages-behavior . sent))))) ; IMAP doesn't take care of this
  
  ;; don't ask for context when starting mu4e (default to uoa) 
  (setq mu4e-context-policy 'pick-first))
#+end_src

** Sending email

#+begin_src emacs-lisp
(use-package mu4e
  :config
  (setq sendmail-program "/usr/bin/msmtp" 
        send-mail-function #'smtpmail-multi-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src

** Email alerts

#+begin_src emacs-lisp
;; email alerts
(use-package mu4e
  :config
  (defun new-mail-alert ()
    (start-process-shell-command "mail-alert" nil "mail_alert")) ; calls script in ~/.local/bin
  (add-hook 'mu4e-index-updated-hook #'new-mail-alert))
#+end_src
