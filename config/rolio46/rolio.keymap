#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define HOST_OS 1  // set to 1 for Linux, default is 0 (Windows)
#include "helper.h"

/* layer shortcuts */

#define BASE      0
#define NUM_SYM   1
#define F_NAV     2
#define WRKSPC    3
#define WRK_SFT   4
#define WRK_CTR   5
#define KB_SET    6

/* custom behaviors */

// em dash
ZMK_UNICODE_SINGLE(em_dash, N2, N0, N1, N4)

// en dash
ZMK_UNICODE_SINGLE(en_dash, N2, N0, N1, N3)

// multiplication sign
ZMK_UNICODE_SINGLE(multip, N0, N0, D, N7)

// dashes key: 1 tap for hyphen/minus, 2 for em-dash, 3 for en-dash
ZMK_BEHAVIOR(dashes, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp MINUS>, <&em_dash>, <&en_dash>;
)

// tilde and backtick key
ZMK_BEHAVIOR(tilde_bkt, mod_morph,
    bindings = <&kp TILDE>, <&kp GRAVE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap dance for escape key: 1 for escape, 2 for home
ZMK_BEHAVIOR(esc_hom, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp ESC>, <&kp HOME>;
)

// tap dance for sqt key: 1 for sqt, 2 for end, hold for control
ZMK_BEHAVIOR(sqt_end, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&mt RCTRL SQT>, <&kp END>;
)

// tap dance for control key: 1 for sticky control, 2 for sticky shift control
ZMK_BEHAVIOR(st_ctr, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LCTRL>, <&sk LS(LCTRL)>;
)

// tap dance for shift keys: 1 for sticky shift, 2 for capsword
ZMK_BEHAVIOR(st_sft, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHIFT>, <&caps_word>;
)

// tap dance for num-sym layer: 1 for sticky, 2 for toggle
ZMK_BEHAVIOR(num_sym, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sl 1>, <&tog 1>;
)

// tap dance for f-nav layer: 1 for sticky, 2 for toggle
ZMK_BEHAVIOR(fnav, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sl 2>, <&tog 2>;
)

// hold tap with sticky layer on the tap (used for super key below)
ZMK_BEHAVIOR(sticky_tp, hold_tap,
    tapping-term-ms = <200>;
    bindings = <&kp>, <&sl>;
)

// tap dance for super key: 1 for sticky workspace layer, 2 for sticky super shift layer, 3 for sticky super control layer, and hold for super
ZMK_BEHAVIOR(stk_sup, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sticky_tp LGUI 3>, <&sl 4>, <&sl 5>;
)

// tap dance for alt key: 1 for underscore, 2 for sticky alt, 3 for toggle settings layer
ZMK_BEHAVIOR(und_alt, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp UNDER>, <&sk ALT>, <&tog 6>;
)

// tap dance for left 'sometimes' key: 1 for copy, 2 for cut
ZMK_BEHAVIOR(some_l, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(LS(C))>, <&kp LC(X)>;
)

// tap dance for right 'sometimes' key: 1 for paste, 2 for undo, 3 for toggle super control layer (to resize windows in river)
ZMK_BEHAVIOR(some_r, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(LS(V))>, <&kp LC(Z)>, <&tog 5>;
)

// aliases
#define LSFT_ENT        &mt LSHIFT ENTER
#define RSFT_SPC        &mt RSHIFT SPACE
#define TAB_SC          &mt LS(LEFT_CONTROL) TAB
#define EXCLAM          &kp EXCLAMATION
#define L_PAREN         &kp LEFT_PARENTHESIS
#define R_PAREN         &kp RIGHT_PARENTHESIS
#define L_BRACE         &kp LEFT_BRACE
#define R_BRACE         &kp RIGHT_BRACE
#define L_BRACK         &kp LEFT_BRACKET
#define R_BRACK         &kp RIGHT_BRACKET

/* keymap */

ZMK_LAYER(base,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          TAB_SC        &kp Q         &kp W         &kp E         &kp R         &kp T                                         &kp Y         &kp U         &kp I         &kp O         &kp P         &dashes
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &esc_hom      &kp A         &kp S         &kp D         &kp F         &kp G                                         &kp H         &kp J         &kp K         &kp L         &kp SEMI      &sqt_end
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &st_sft       &kp Z         &kp X         &kp C         &kp V         &kp B         &kp F16           &kp F17       &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &st_sft
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                                      &some_l       &fnav         &st_ctr       LSFT_ENT      &num_sym          &stk_sup      RSFT_SPC      &kp BACKSPACE &und_alt      &some_r 
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    , &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT
)

ZMK_LAYER(num-sym,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                                  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans        EXCLAM        &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                                   &kp CARET     &kp AMPERSAND L_PAREN       R_PAREN       &kp ASTERISK  &trans
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans        &tilde_bkt    L_BRACE       R_BRACE       &kp PIPE      &kp EQUAL     &trans            &trans        &kp PLUS      &kp BACKSLASH &trans        &trans        &trans        &trans
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                                      &trans        &trans        &trans        &trans	      &tog NUM_SYM      &trans        &trans        &trans        &trans        &trans
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    , &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)

ZMK_LAYER(f-nav,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans        &kp F11       &kp F12       &kp DEL       &kp PAGE_DOWN &kp PAGE_UP                                   &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &trans        &trans
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans        &trans        &trans        &trans        &trans        &trans        &trans            &trans        &trans        &trans        L_BRACK       R_BRACK       &multip       &trans
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                                      &trans        &tog F_NAV    &trans        &trans        &trans            &trans        &trans        &trans        &trans        &trans
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    , &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT
)

ZMK_LAYER(workspace,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                               ╭─────────────┬─────────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp LG(TAB)   &kp LG(N1)    &kp LG(N2)    &kp LG(N3)    &kp LG(N4)    &kp LG(N5)                                    &kp LG(N6)    &kp LG(N7)	      &kp LG(N8)    &kp LG(N9)    &kp LG(N0)    &kp LG(MINUS)
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤                               ├─────────────┼─────────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LG(ESC)   &kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp LG(G)                                     &kp LG(H)     &kp LG(J)         &kp LG(K)     &kp LG(L)     &kp LG(SEMI)  &kp LG(SQT)
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans        &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LG(B)      &trans           &trans        &kp LG(N)     &kp LG(M)         &kp LG(COMMA) &kp LG(DOT)   &kp LG(FSLH)  &trans 
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                                      &trans        &trans        &tog WRKSPC   &kp LG(ENTER)  &trans           &trans        &kp LG(SPACE) &kp LG(BACKSPACE) &trans        &trans
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────────┴─────────────┴─────────────╯
    , &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT
)

ZMK_LAYER(worksp-sft,
     // ╭───────────────┬──────────────┬──────────────┬──────────────┬──────────────┬────────────────╮                                   ╭────────────────┬───────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮
          &kp LS(LG(TAB)) &kp LS(LG(N1)) &kp LS(LG(N2)) &kp LS(LG(N3)) &kp LS(LG(N4)) &kp LS(LG(N5))                                       &kp LS(LG(N6))   &kp LS(LG(N7))      &kp LS(LG(N8))   &kp LS(LG(N9))   &kp LS(LG(N0))   &kp LS(LG(MINUS))
     // ├───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤────────────────┤                                   ├────────────────┼───────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤
          &kp LS(LG(ESC)) &kp LS(LG(A))  &kp LS(LG(S))  &kp LS(LG(D))  &kp LS(LG(F))  &kp LS(LG(G))                                        &kp LS(LG(H))    &kp LS(LG(J))       &kp LS(LG(K))    &kp LS(LG(L))    &kp LS(LG(SEMI)) &kp LS(LG(SQT))
     // ├───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤────────────────┤───────────────┤   ├───────────────├────────────────┼───────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤
          &trans          &kp LS(LG(Z))  &kp LS(LG(X))  &kp LS(LG(C))  &kp LS(LG(V))  &kp LS(LG(B))     &trans              &trans         &kp LS(LG(N))    &kp LS(LG(M))       &kp LS(LG(COMMA)) &kp LS(LG(DOT)) &kp LS(LG(FSLH)) &trans
     // ╰───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤────────────────┤───────────────┤   ├───────────────├────────────────┼───────────────────┼────────────────┼────────────────┼────────────────┤────────────────╯
                                         &trans         &trans         &tog WRK_SFT   &kp LS(LG(ENTER)) &trans              &trans         &kp LS(LG(SPACE)) &kp(LG(BACKSPACE)) &trans           &trans
     //                                ╰──────────────┴──────────────┴──────────────┴────────────────┴───────────────╯   ╰───────────────┴────────────────┴───────────────────┴────────────────┴────────────────╯
    , &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT
)

ZMK_LAYER(worksp-ctr,
     // ╭───────────────┬──────────────┬──────────────┬──────────────┬──────────────┬────────────────╮                                   ╭──────────────────┬─────────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮
          &kp LG(LC(TAB)) &kp LG(LC(N1)) &kp LG(LC(N2)) &kp LG(LC(N3)) &kp LG(LC(N4)) &kp LG(LC(N5))                                       &kp LG(LC(N6))     &kp LG(LC(N7))        &kp LG(LC(N8))   &kp LG(LC(N9))   &kp LG(LC(N0))   &kp LG(LC(MINUS))
     // ├───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤────────────────┤                                   ├──────────────────┼─────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤
          &kp LG(LC(ESC)) &kp LG(LC(A))  &kp LG(LC(S))  &kp LG(LC(D))  &kp LG(LC(F))  &kp LG(LC(G))                                        &kp LG(LC(H))      &kp LG(LC(J))         &kp LG(LC(K))    &kp LG(LC(L))    &kp LG(LC(SEMI)) &kp LG(LC(SQT))
     // ├───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤────────────────┤───────────────┤   ├───────────────├──────────────────┼─────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤
          &trans          &kp LG(LC(Z))  &kp LG(LC(X))  &kp LG(LC(C))  &kp LG(LC(V))  &kp LG(LC(B))     &trans              &trans         &kp LG(LC(N))      &kp LG(LC(M))         &kp LG(LC(COMMA)) &kp LG(LC(DOT)) &kp LG(LC(FSLH)) &trans 
     // ╰───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤────────────────┤───────────────┤   ├───────────────├──────────────────┼─────────────────────┼────────────────┼────────────────┼────────────────┤────────────────╯
                                         &trans         &trans         &tog WRK_CTR   &kp LG(LC(ENTER))	&trans              &trans         &kp LG(LC(SPACE))  &kp LG(LC(BACKSPACE)) &trans           &trans
     //                                ╰──────────────┴──────────────┴──────────────┴────────────────┴───────────────╯   ╰───────────────┴──────────────────┴─────────────────────┴────────────────┴────────────────╯
    , &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT
)

ZMK_LAYER(settings,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                  &trans        &trans        &trans        &trans        &trans        &bl BL_TOG
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &bt BT_CLR    &trans        &trans        &trans        &trans        &trans                                        &trans        &trans        &trans        &trans        &trans        &trans
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans        &trans        &trans        &trans        &trans        &trans        &trans            &trans        &trans        &trans        &bl BL_DEC    &bl BL_INC    &trans        &trans
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤─────────────┤   ├─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                                      &trans        &trans        &tog KB_SET   &trans        &trans            &trans        &trans        &trans        &tog KB_SET   &trans
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
    , &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT
)
